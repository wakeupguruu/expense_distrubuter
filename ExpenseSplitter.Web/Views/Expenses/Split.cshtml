@model ExpenseSplitter.Web.Models.ViewModels.ExpenseStep2Vm
@{
    Layout = "/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Add Expense - Step 2";
}
<div class="container py-4">
    <h2 class="mb-3">Add Expense - Step 2: Split Method</h2>

    <form asp-action="Split" method="post" id="splitForm">
        <div asp-validation-summary="All" class="text-danger mb-2"></div>
        <input type="hidden" asp-for="TripId" />
        <input type="hidden" asp-for="Title" />
        <input type="hidden" asp-for="TotalAmount" />
        <input type="hidden" asp-for="Category" />
        <input type="hidden" name="ExpenseDate" value="@Model.ExpenseDate.ToString("yyyy-MM-dd")" />
        <input type="hidden" asp-for="Description" />
        <input type="hidden" asp-for="PaidBy" />

        <div class="mb-3">
            <label class="form-label">Total Amount</label>
            <div class="fs-5 fw-semibold">@Model.TotalAmount</div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="SplitMethod" value="EqualAll" checked />
                    <label class="form-check-label">Split equally among all members</label>
                </div>
                <div class="form-check mt-2">
                    <input class="form-check-input" type="radio" asp-for="SplitMethod" value="EqualSelected" />
                    <label class="form-check-label">Split equally among selected members</label>
                </div>
                <div class="form-check mt-2">
                    <input class="form-check-input" type="radio" asp-for="SplitMethod" value="Custom" />
                    <label class="form-check-label">Custom split</label>
                </div>
            </div>
        </div>

        <div id="equalSelected" class="card mb-3 d-none">
            <div class="card-body">
                <h5 class="card-title">Select members</h5>
                <div class="row row-cols-1 row-cols-md-2 g-2">
                    @for (int i = 0; i < Model.Members.Count; i++)
                    {
                        <div class="col">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input member-select" name="SelectedUserIds" value="@Model.Members[i].UserId" id="sel_@i" />
                                <label class="form-check-label" for="sel_@i">@Model.Members[i].Display</label>
                            </div>
                        </div>
                    }
                </div>
                <div class="mt-2 text-muted small" id="equalSelectedHint"></div>
            </div>
        </div>

        <div id="customSplit" class="card mb-3 d-none">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Custom amounts</h5>
                    <div class="d-flex gap-2">
                        <button type="button" id="btnSplitRemaining" class="btn btn-sm btn-outline-secondary">Split Remaining Equally</button>
                        <button type="button" id="btnClearAll" class="btn btn-sm btn-outline-danger">Clear All</button>
                    </div>
                </div>
                <div class="row row-cols-1 row-cols-md-2 g-2 mt-2">
                    @for (int i = 0; i < Model.Members.Count; i++)
                    {
                        <div class="col">
                            <div class="input-group">
                                <span class="input-group-text">@Model.Members[i].Display</span>
                                <input type="hidden" name="CustomSplits[@i].UserId" value="@Model.Members[i].UserId" />
                                <input type="hidden" name="CustomSplits[@i].Display" value="@Model.Members[i].Display" />
                                <input type="number" step="0.01" min="0" class="form-control custom-amount" name="CustomSplits[@i].CustomAmount" value="" />
                            </div>
                        </div>
                    }
                </div>
                <div class="mt-2">
                    <span class="small">Sum:</span>
                    <span class="fw-semibold" id="customSum">0.00</span>
                    <span class="small ms-2">of</span>
                    <span class="fw-semibold">@Model.TotalAmount</span>
                    <span class="ms-2 badge bg-secondary" id="remainingBadge">Remaining: @Model.TotalAmount</span>
                </div>
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <a class="btn btn-secondary" href="@Url.Action("Create", new { tripId = Model.TripId })">Back</a>
            <button class="btn btn-primary" type="submit">Next</button>
        </div>
    </form>
</div>
@section Scripts {
<script>
(function(){
    const splitRadios = document.querySelectorAll('input[name="SplitMethod"]');
    const eqSel = document.getElementById('equalSelected');
    const custom = document.getElementById('customSplit');
    const hint = document.getElementById('equalSelectedHint');
    const total = @Model.TotalAmount;

    function updateUI(){
        const val = document.querySelector('input[name="SplitMethod"]:checked').value;
        eqSel.classList.toggle('d-none', val !== 'EqualSelected');
        custom.classList.toggle('d-none', val !== 'Custom');
        if(val === 'EqualSelected') updateEqualSelectedHint();
        if(val === 'Custom') updateCustomSum();
    }

    function updateEqualSelectedHint(){
        const selected = document.querySelectorAll('.member-select:checked').length;
        const each = selected ? (total / selected) : 0;
        hint.textContent = selected ? `Each selected member pays ${each.toFixed(2)}` : 'Select at least one member';
    }

    function updateCustomSum(){
        let sum = 0;
        document.querySelectorAll('.custom-amount').forEach(i=>{ sum += parseFloat(i.value||0); });
        document.getElementById('customSum').textContent = sum.toFixed(2);
        const remaining = (total - sum);
        const badge = document.getElementById('remainingBadge');
        badge.textContent = `Remaining: ${remaining.toFixed(2)}`;
        badge.className = 'badge ' + (Math.abs(remaining) < 0.01 ? 'bg-success' : (remaining > 0 ? 'bg-warning text-dark' : 'bg-danger'));
    }

    document.querySelectorAll('.member-select').forEach(cb=>cb.addEventListener('change', updateEqualSelectedHint));
    document.querySelectorAll('.custom-amount').forEach(inp=>inp.addEventListener('input', updateCustomSum));

    document.getElementById('btnSplitRemaining')?.addEventListener('click', ()=>{
        let sum = 0; const inputs = Array.from(document.querySelectorAll('.custom-amount'));
        inputs.forEach(i=> sum += parseFloat(i.value||0));
        const remaining = Math.max(0, total - sum);
        const per = remaining / inputs.length;
        inputs.forEach(i=>{ i.value = (parseFloat(i.value||0) + per).toFixed(2); });
        updateCustomSum();
    });
    document.getElementById('btnClearAll')?.addEventListener('click', ()=>{
        document.querySelectorAll('.custom-amount').forEach(i=> i.value = '');
        updateCustomSum();
    });

    splitRadios.forEach(r=> r.addEventListener('change', updateUI));
    updateUI();
})();
</script>
<partial name="/Pages/Shared/_ValidationScriptsPartial.cshtml" />
}
